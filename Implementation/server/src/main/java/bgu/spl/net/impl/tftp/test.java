package bgu.spl.net.impl.tftp;

import bgu.spl.net.srv.ConnectionsImpl;

public class test {
    @SuppressWarnings({ "unused", "unchecked", "rawtypes" })
    public static void main(String[] args) {
        System.out.println("starting...");

        byte[] a1 = {0x00, 0x07, 0x62, 0x65, 0x6e, 0x00};             //LOGRQ ben
        byte[] a2 = {0x00, 0x07, 0x6d, 0x69, 0x6b, 0x69, 0x00} ;       //LOGRQ miki
        byte[] a3 = {0x00, 0x07, 0x6d, 0x00, 0x6b, 0x69, 0x00} ;       //LOGRQ with 0 byte

        byte[] b1 = {0x00, 0x04, 0x00, 0x00};                            //ACK 00 (block no.)
        byte[] b2 = {0x00, 0x04, 0x00, 0x05};                            //ACK 05 (block no.)

        byte[] c = {0x00, 0x06};                                        //DIRQ
        byte[] d = {0x00, 0x08, 0x63, 0x61, 0x74, 0x00};                //DELRQ cat
        byte[] d2 = {0x00, 0x08, 0x64, 0x6f, 0x67, 0x00};                //DELRQ dog
        byte[] e1 = {0x00, 0x01, 0x63, 0x61, 0x74, 0x00};             //RRQ cat
        byte[] e2 = {0x00, 0x01, 0x64, 0x6f, 0x67, 0x00};             //RRQ dog
        byte[] f1 = {0x00, 0x02, 0x63, 0x61, 0x74, 0x00};             //WRQ cat
        byte[] f2 = {0x00, 0x02, 0x64, 0x6f, 0x67, 0x00};             //WRQ dog
        byte[] f3 = {0x00, 0x02, 0x64, 0x00, 0x67, 0x00};             //WRQ with 0 byte check
        byte[] g = {0x00, 0x01, 0x64, 0x6f, 0x00 ,0x67, 0x00};        //RRQ with 0 byte check

        byte[] h1 = {0x00, 0x09, 0x00, 0x63, 0x61, 0x74, 0x00};         //BCAST remove cat
        byte[] h2 = {0x00, 0x09, 0x01, 0x63, 0x61, 0x74, 0x00};         //BCAST add cat
        byte[] h3 = {0x00, 0x09, 0x00, 0x64, 0x6f, 0x67};           //BCAST remove dog
        byte[] h4 = {0x00, 0x09, 0x01, 0x63, 0x61, 0x74, 0x00};         //BCAST add dog

        byte[] z0 = {0x00, 0x05, 0x00, 0x03, 0x00};       //ERROR 

        byte[] k = {0x00, 0x0a};

        //               OPCODE   PACKETSIZE  BLOCKNUMBER   -----DATA----------
        byte[] dat = {0x00, 0x03, 0x00, 0x05, 0x00, 0x00, 0x30, 0x31, 0x32, 0x33, 0x34};


        TftpProtocol prot1 = new TftpProtocol();
        TftpProtocol prot2 = new TftpProtocol();

        prot1.start(1, new ConnectionsImpl());
        prot2.start(2, new ConnectionsImpl());

        //prot1.process(dat);
        prot1.process(a1);
        prot1.process(f2);
        prot1.process(dat);


    }
}
